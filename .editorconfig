root = true

##########################################
# C# files
##########################################

[*.cs]

#### Code style rules (IDE) ####

# Default severity level for analyzers
dotnet_analyzer_diagnostic.severity = error

# IDE0003: Remove 'this.' or 'Me.' qualification
dotnet_style_qualification_for_field = false
dotnet_style_qualification_for_property = false
dotnet_style_qualification_for_method = false
dotnet_style_qualification_for_event = false

# IDE0008: Use explicit type instead of 'var'
csharp_style_var_for_built_in_types = false
csharp_style_var_when_type_is_apparent = false
csharp_style_var_elsewhere = false

# IDE0011: Prefer curly braces even for one line of code
csharp_prefer_braces = true

# IDE0016: Prefer to use 'throw' expressions instead of 'throw' statements
csharp_style_throw_expression = true

# IDE0017: Prefer objects to be initialized using object initializers when possible
dotnet_style_object_initializer = true

# IDE0018: Prefer 'out' variables to be declared inline in the argument list of a method call when possible
csharp_style_inlined_variable_declaration = true

# IDE0019: Prefer pattern matching to determine if something is of a particular type
csharp_style_pattern_matching_over_as_with_null_check = true

# IDE0020: Prefer pattern matching instead of 'is' expressions with type casts
csharp_style_pattern_matching_over_is_with_cast_check = true

# IDE0021: Prefer expression bodies for constructors
csharp_style_expression_bodied_constructors = true

# IDE0022: Prefer expression bodies for methods
csharp_style_expression_bodied_methods = true

# IDE0023-IDE0024: Prefer expression bodies for operators
csharp_style_expression_bodied_operators = true

# IDE0025: Prefer expression bodies for properties
csharp_style_expression_bodied_properties = true

# IDE0026: Prefer expression bodies for indexers
csharp_style_expression_bodied_indexers = true

# IDE0027: Prefer expression bodies for accessors
csharp_style_expression_bodied_accessors = true

# IDE0028, IDE0300-IDE0305: Prefer to use collection initializers 
dotnet_style_collection_initializer = true
dotnet_style_prefer_collection_expression = when_types_exactly_match

# IDE0029, IDE0030, IDE0270: Prefer null-coalescing expressions
dotnet_style_coalesce_expression = true

# IDE0031: Prefer to use null-conditional operator when possible
dotnet_style_null_propagation = true

# IDE0032: Prefer auto-implemented properties
dotnet_style_prefer_auto_properties = true

# IDE0033: Prefer tuple names to ItemX properties
dotnet_style_explicit_tuple_names = true

# IDE0034: Prefer 'default' over 'default(T)'
csharp_prefer_simple_default_expression = true

# IDE0036: Order modifiers
csharp_preferred_modifier_order = public,private,protected,internal,file,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,required,volatile,async

# IDE0037: Prefer inferred tuple element names
dotnet_style_prefer_inferred_tuple_names = true
dotnet_style_prefer_inferred_anonymous_type_member_names = true

# IDE0039: Prefer local functions over anonymous functions
csharp_style_prefer_local_over_anonymous_function = true

# IDE0040: Prefer accessibility modifiers except for public interface members
dotnet_style_require_accessibility_modifiers = for_non_interface_members

# IDE0041: Prefer 'is null' check
dotnet_style_prefer_is_null_check_over_reference_equality_method = true

# IDE0042: Prefer deconstructed variable declaration
csharp_style_deconstructed_variable_declaration = true

# IDE0044: Prefer that private fields be marked 'readonly' if they're only ever assigned inline or in a constructor
dotnet_style_readonly_field = true

# IDE0045: Prefer assignments with a ternary conditional
dotnet_style_prefer_conditional_expression_over_assignment = true

# IDE0046: Prefer return statements to use a ternary conditional
dotnet_style_prefer_conditional_expression_over_return = true

# IDE0047-IDE0048: Prefer parentheses to clarify arithmetic operator precedence
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity
dotnet_style_parentheses_in_other_operators = never_if_unnecessary

# IDE049: Use language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true
dotnet_style_predefined_type_for_member_access = true

# IDE0053: Prefer expression bodies for lambdas
csharp_style_expression_bodied_lambdas = true

# IDE0054, IDE0074: Prefer compound assignment expressions
dotnet_style_prefer_compound_assignment = true

# IDE0055: Formatting rule
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = false
csharp_indent_labels = one_less_than_current
csharp_indent_switch_labels = true
csharp_new_line_before_catch = true
csharp_new_line_before_else = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_open_brace = all
csharp_new_line_between_query_expression_clauses = true
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = false
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = do_not_ignore
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false
dotnet_separate_import_directive_groups = false
dotnet_sort_system_directives_first = true

# IDE0056: Prefer not to use the '^' operator when calculating an index from the end of a collection
csharp_style_prefer_index_operator = false

# IDE0057: Prefer not to use the range operator '..' when extracting a slice of a collection
csharp_style_prefer_range_operator = false

# IDE0058: Prefer to assign an unused expression to a discard
csharp_style_unused_value_expression_statement_preference = discard_variable

# IDE0059: Prefer to use a discard when assigning a value that's not used
csharp_style_unused_value_assignment_preference = discard_variable

# IDE0060: Flag methods with any accessibility that contain unused parameters
dotnet_code_quality_unused_parameters = all

# IDE0061: 	Prefer expression bodies for local functions
csharp_style_expression_bodied_local_functions = true

# IDE0062: Prefer local functions to be marked 'static'
csharp_prefer_static_local_function = true

# IDE0063: Prefer to use a 'using' declaration
csharp_prefer_simple_using_statement = true

# IDE0065: Prefer 'using' directives to be placed outside the namespace
csharp_using_directive_placement = outside_namespace

# IDE0066: Prefer to use a 'switch' expression
csharp_style_prefer_switch_expression = true

# IDE0071: Prefer simplified interpolated strings
dotnet_style_prefer_simplified_interpolation = true

# IDE0073: Do not require a file header
file_header_template = unset

# IDE0075: Prefer simplified conditional expressions
dotnet_style_prefer_simplified_boolean_expressions = true

# IDE0078, IDE0260: Prefer to use pattern matching constructs, when possible
csharp_style_prefer_pattern_matching = true

# IDE0079: Remove unnecessary suppression
dotnet_remove_unnecessary_suppression_exclusions = none

# IDE0083: Prefer to use the 'not' pattern, when possible
csharp_style_prefer_not_pattern = true

# IDE0090: Prefer target-typed new expressions when created type is apparent
csharp_style_implicit_object_creation_when_type_is_apparent = true

# IDE0150: Prefer null check over type check
csharp_style_prefer_null_check_over_type_check = true

# IDE0161: Use file-scoped namespace 
csharp_style_namespace_declarations = file_scoped

# IDE0170: Prefer the extended property pattern
csharp_style_prefer_extended_property_pattern = true

# IDE0180: Prefer using a tuple to swap two values
csharp_style_prefer_tuple_swap = true

# IDE0200: Prefer to convert a lambda expression to a method group
csharp_style_prefer_method_group_conversion = true

# IDE0250: 	Prefer to make a struct 'readonly' when all its fields are 'readonly'
csharp_style_prefer_readonly_struct = true

# IDE0251: Prefer to make struct members 'readonly'
csharp_style_prefer_readonly_struct_member = true

# IDE0290: Prefer to use primary constructors
csharp_style_prefer_primary_constructors = true

# IDE1005: Prefer to use the conditional coalescing operator '?.' when invoking a lambda expression
csharp_style_conditional_delegate_call = true


##### Symbol groups #####

# PascalCase elements
dotnet_naming_symbols.pascal_case_elements.applicable_kinds = namespace, class, enum, struct, delegate, event, method, property

# Interfaces
dotnet_naming_symbols.interfaces.applicable_kinds = interface

# Type parameters
dotnet_naming_symbols.type_parameters.applicable_kinds = type_parameter

# public/protected/internal static readonly fields
dotnet_naming_symbols.public_static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.public_static_readonly_fields.applicable_accessibilities = public, protected, protected_internal
dotnet_naming_symbols.public_static_readonly_fields.required_modifiers = static, readonly

# public/protected/internal constant fields
dotnet_naming_symbols.public_constant_fields.applicable_kinds = field
dotnet_naming_symbols.public_constant_fields.applicable_accessibilities = public, protected, protected_internal
dotnet_naming_symbols.public_constant_fields.required_modifiers = const

# private/internal fields
dotnet_naming_symbols.private_fields.applicable_kinds = field
dotnet_naming_symbols.private_fields.applicable_accessibilities = private, internal

# private/protected/internal static fields
dotnet_naming_symbols.private_static_fields.applicable_kinds   = field
dotnet_naming_symbols.private_static_fields.applicable_accessibilities = private, internal, private_protected
dotnet_naming_symbols.private_static_fields.required_modifiers = static

# Parameters
dotnet_naming_symbols.parameters.applicable_kinds = parameter


##### Naming styles #####

# PascalCase
dotnet_naming_style.pascal_case_style.capitalization = pascal_case

# camelCase
dotnet_naming_style.camel_case_style.capitalization = camel_case

# _camelCase
dotnet_naming_style.underscore_camel_case_style.required_prefix = _
dotnet_naming_style.underscore_camel_case_style.capitalization = camel_case

# IPascalCase
dotnet_naming_style.prefix_pascal_case_with_i_style.required_prefix = I
dotnet_naming_style.prefix_pascal_case_with_i_style.capitalization = pascal_case

# TPascalCase
dotnet_naming_style.prefix_pascal_case_with_t_style.required_prefix = T
dotnet_naming_style.prefix_pascal_case_with_t_style.capitalization = pascal_case

# s_camelCase
dotnet_naming_style.prefix_camel_case_with_s_underscore_style.required_prefix = s_
dotnet_naming_style.prefix_camel_case_with_s_underscore_style.capitalization = camel_case


##### Naming rules #####

# Must be PascalCase
dotnet_naming_rule.pascal_case_elements.symbols = pascal_case_elements
dotnet_naming_rule.pascal_case_elements.style = pascal_case_style
dotnet_naming_rule.pascal_case_elements.severity = error

# Interfaces use PascalCase and are prefixed with 'I'
dotnet_naming_rule.prefix_pascal_case_with_i_interfaces.symbols = interfaces
dotnet_naming_rule.prefix_pascal_case_with_i_interfaces.style = prefix_pascal_case_with_i_style
dotnet_naming_rule.prefix_pascal_case_with_i_interfaces.severity = error

# Generics Type Parameters use PascalCase and are prefixed with 'T'
dotnet_naming_rule.prefix_pascal_case_with_t_type_parameters.symbols = type_parameters
dotnet_naming_rule.prefix_pascal_case_with_t_type_parameters.style = prefix_pascal_case_with_t_style
dotnet_naming_rule.prefix_pascal_case_with_t_type_parameters.severity = error

# public/protected/internal static readonly fields use PascalCase
dotnet_naming_rule.pascal_case_public_static_readonly_fields.symbols = public_static_readonly_fields
dotnet_naming_rule.pascal_case_public_static_readonly_fields.style = pascal_case_style
dotnet_naming_rule.pascal_case_public_static_readonly_fields.severity = error

# public/protected/internal constant fields use PascalCase
dotnet_naming_rule.pascal_case_public_constant_fields.symbols = public_constant_fields
dotnet_naming_rule.pascal_case_public_constant_fields.style = pascal_case_style
dotnet_naming_rule.pascal_case_public_constant_fields.severity = error

# private/internal fields use camelCase and are prefixed with '_'
dotnet_naming_rule.underscore_camel_case_private_fields.symbols  = private_fields
dotnet_naming_rule.underscore_camel_case_private_fields.style = underscore_camel_case_style
dotnet_naming_rule.underscore_camel_case_private_fields.severity = error

# Function parameters use camelCase
dotnet_naming_rule.camel_case_parameters.symbols = parameters
dotnet_naming_rule.camel_case_parameters.style = camel_case_style
dotnet_naming_rule.camel_case_parameters.severity = error

# Static fields use camelCase and are prefixed with '_'
dotnet_naming_rule.prefix_camel_case_with_s_underscore_private_static_fields.symbols  = private_static_fields
dotnet_naming_rule.prefix_camel_case_with_s_underscore_private_static_fields.style = prefix_camel_case_with_s_underscore_style
dotnet_naming_rule.prefix_camel_case_with_s_underscore_private_static_fields.severity = error


#### Ignored rules ####

dotnet_diagnostic.CS8632.severity = none
dotnet_diagnostic.SA0001.severity = none
dotnet_diagnostic.SA1000.severity = none
dotnet_diagnostic.SA1009.severity = none
dotnet_diagnostic.SA1010.severity = none
dotnet_diagnostic.SA1011.severity = none
dotnet_diagnostic.SA1101.severity = none
dotnet_diagnostic.SA1200.severity = none
dotnet_diagnostic.SA1308.severity = none
dotnet_diagnostic.SA1309.severity = none
dotnet_diagnostic.SA1311.severity = none
dotnet_diagnostic.SA1600.severity = none
dotnet_diagnostic.SA1633.severity = none



##########################################
# Other
##########################################

[*]
insert_final_newline = true
indent_style = space
indent_size = 4
trim_trailing_whitespace = true

# Solution Files
[*.sln]
indent_style = tab

# Project Files
[*.csproj]
indent_size = 2

# XML Configuration Files
[*.{xml,config}]
indent_size = 2

# JSON Files
[*.json]
indent_size = 2

# YAML Files
[*.{yml,yaml}]
indent_size = 2

# Markdown Files
[*.md]
trim_trailing_whitespace = false